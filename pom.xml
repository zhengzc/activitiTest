<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.zzc</groupId>
	<artifactId>activitiTest</artifactId>
	<packaging>war</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>activitiTest Maven Webapp</name>
	<url>http://maven.apache.org</url>

	<!-- 定义属性 -->
	<properties>
		<project.build.sourceEncodeding>UTF-8</project.build.sourceEncodeding>
		<org.springframework.version>3.1.3.RELEASE</org.springframework.version>
		<freemarker.version>2.3.19</freemarker.version>
		<versions.morphia>1.2.3</versions.morphia>
		<finalName>activitiTest</finalName>
	</properties>

	<!-- 编译配置 -->
	<build>
		<!-- 设置war包名字 -->
		<finalName>${finalName}</finalName>
		<!-- 设置源代码目录 -->
<!-- 		<sourceDirectory>${basedir}/src</sourceDirectory> -->

		<!-- 设置源代码编译后目录 -->
<!-- 		<outputDirectory>${basedir}/WebRoot/WEB-INF/classes</outputDirectory> -->

		<!-- 资源配置 -->
<!-- 		<resources> -->
<!-- 			<resource> -->
				<!-- 文件源路径 -->
<!-- 				<directory>${basedir}/config</directory> -->
				<!-- 包含的目录 -->
				<!-- <includes> -->
				<!-- <include></include> -->
				<!-- </includes> -->
				<!-- 排除的目录 -->
<!-- 				<excludes> -->
<!-- 					<exclude>**/*.java</exclude> -->
<!-- 				</excludes> -->
<!-- 			</resource> -->
<!-- 		</resources> -->

		<!-- 插件 -->
		<plugins>
			<!-- maven-eclipse插件 -->
<!-- 			<plugin> -->
<!-- 				<groupId>org.apache.maven.plugins</groupId> -->
<!-- 				<artifactId>maven-eclipse-plugin</artifactId> -->
<!-- 				<version>2.9</version> -->
<!-- 			</plugin> -->

			<!-- 打包插件 -->
<!-- 			<plugin> -->
<!-- 				<artifactId>maven-war-plugin</artifactId> -->
<!-- 				<configuration> -->
<!-- 					<webappDirectory>${basedir}/WebRoot</webappDirectory> -->
<!-- 					<warSourceDirectory>${basedir}/WebRoot</warSourceDirectory> -->
<!-- 				</configuration> -->
<!-- 			</plugin> -->
			<!-- 编译插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>  
   				<artifactId>maven-compiler-plugin</artifactId>  
<!-- 				设置编译jdk版本以及编译编码方式 -->
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>

			<!-- 添加cargo插件，自动部署到tomcat -->
<!-- 			<plugin> -->
<!-- 				<groupId>org.codehaus.cargo</groupId> -->
<!-- 				<artifactId>cargo-maven2-plugin</artifactId> -->
<!-- 				<version>1.4.0</version> -->
				<!-- 部署模式 -->

<!-- 				<configuration> -->
<!-- 					<container> -->
<!-- 						<containerId>tomcat6x</containerId> -->
<!-- 						<home>/home/zhengzhichao/dev_tool/apache-tomcat-6.0.37</home> -->
<!-- 					</container> -->
					<!-- for service machine begin -->
					<!-- <container> -->
					<!-- <containerId>tomcat6x</containerId> -->
					<!-- <home>/etc/tomcat6</home> -->
					<!-- </container> -->
					<!-- for service machine end -->

					<!-- 在standalone模式下，每次发布，cargo都会复制tomcat到一个指定目录，清空该tomcat，重新部署工程,此种部署模式可以指定端口 -->
					<!-- <configuration> -->
					<!-- <type>standalone</type> -->
					<!-- <home>d:\test_maven_cargoTomcat\apache-tomcat-6.0.26</home> -->
					<!-- <properties> -->
					<!-- <cargo.servlet.port>8888</cargo.servlet.port> -->
					<!-- </properties> -->
					<!-- </configuration> -->


					<!-- 在existing模式下，每次发布将只会将项目发布到指定的web容器中，无需指定端口，将使用指定web容器的端口配置 -->
<!-- 					<configuration> -->
<!-- 						<type>existing</type> -->
<!-- 						<home>/home/zhengzhichao/dev_tool/apache-tomcat-6.0.37</home> -->
<!-- 					</configuration> -->
					<!-- for service machine start -->
					<!-- <configuration> -->
					<!-- <type>existing</type> -->
					<!-- <home>/var/lib/tomcat6</home> -->
					<!-- </configuration> -->
					<!-- for service machine end -->
<!-- 				</configuration> -->
<!-- 			</plugin> -->


			<!-- 因为maven默认的只能有一个源代码目录位置，所以使用下面的插件添加多个源代码目录 -->
			<!-- <plugin> -->
			<!-- <groupId>org.codehaus.mojo</groupId> -->
			<!-- <artifactId>build-helper-maven-plugin</artifactId> -->
			<!-- <version>1.1</version> -->
			<!-- <executions> -->
			<!-- <execution> -->
			<!-- <id>add-source</id> -->
			<!-- <phase>generate-sources</phase> -->
			<!-- <goals> -->
			<!-- <goal>add-source</goal> -->
			<!-- </goals> -->
			<!-- <configuration> -->
			<!-- <sources> -->
			<!-- <source>${basedir}/src</source> -->
			<!-- <source>${basedir}/src2</source> -->
			<!-- </sources> -->
			<!-- </configuration> -->
			<!-- </execution> -->
			<!-- </executions> -->
			<!-- </plugin> -->
			
<!-- 			使用ant任务 -->
			<plugin> 
				<artifactId>maven-antrun-plugin</artifactId>  
				<executions>     
			        <execution>       
			        	<phase>compile</phase>      
	                	<goals>          
	                		<goal>run</goal>      
	               		</goals>           
	                	<configuration>     
	                    	<tasks>        
	                        	<echo message="------------------------------->hello ant!!!!!!!"></echo>
	                    	</tasks>        
	                	</configuration>      
			        </execution>  
		     	</executions>
			</plugin>

		</plugins>

	</build>


	<!-- 依赖配置 -->
	<dependencies>
		<!-- javaEE默认依赖jar:start -->
		<dependency>
			<groupId>org.apache.openejb</groupId>
			<artifactId>javaee-api</artifactId>
			<version>5.0-1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.faces</groupId>
			<artifactId>jsf-api</artifactId>
			<version>1.2_04</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.faces</groupId>
			<artifactId>jsf-impl</artifactId>
			<version>1.2_04</version>
			<scope>provided</scope>
		</dependency>
		<!-- end -->
		
<!-- 		junit4 begin -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
<!-- 		junit4 end		 -->
		
		<!-- 定时器start -->
<!-- 		<dependency> -->
<!-- 			<groupId>org.quartz-scheduler</groupId> -->
<!-- 			<artifactId>quartz</artifactId> -->
<!-- 			<version>1.8.6</version> -->
<!-- 		</dependency> -->
		<!--end -->
		<!-- struts start -->
		<!-- <dependency>
			<groupId>org.apache.struts</groupId>
			<artifactId>struts2-core</artifactId>
			<version>2.1.8</version>
		</dependency>
		<dependency>
			<groupId>org.apache.struts</groupId>
			<artifactId>struts2-json-plugin</artifactId>
			<version>2.1.8</version>
		</dependency>
		<dependency>
			<groupId>org.apache.struts</groupId>
			<artifactId>struts2-spring-plugin</artifactId>
			<version>2.1.8.1</version>
		</dependency> -->
		<!--end -->
		
<!-- 		freemarker start -->
		<dependency>
			<groupId>org.freemarker</groupId>
			<artifactId>freemarker</artifactId>
			<version>${freemarker.version}</version>
		</dependency>
<!--  		freemarker end -->

		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.12</version>
		</dependency>
		
		<!--spring start -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Expression Language (depends on spring-core) Define this if you use 
			Spring Expression APIs (org.springframework.expression.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Bean Factory and JavaBeans utilities (depends on spring-core) Define 
			this if you use Spring Bean APIs (org.springframework.beans.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Aspect Oriented Programming (AOP) Framework (depends on spring-core, 
			spring-beans) Define this if you use Spring AOP APIs (org.springframework.aop.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Application Context (depends on spring-core, spring-expression, spring-aop, 
			spring-beans) This is the central artifact for Spring's Dependency Injection 
			Container and is generally always defined -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Various Application Context utilities, including EhCache, JavaMail, 
			Quartz, and Freemarker integration Define this if you need any of these integrations -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Transaction Management Abstraction (depends on spring-core, spring-beans, 
			spring-aop, spring-context) Define this if you use Spring Transactions or 
			DAO Exception Hierarchy (org.springframework.transaction.*/org.springframework.dao.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- JDBC Data Access Library (depends on spring-core, spring-beans, spring-context, 
			spring-tx) Define this if you use Spring's JdbcTemplate API (org.springframework.jdbc.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA, 
			and iBatis. (depends on spring-core, spring-beans, spring-context, spring-tx) 
			Define this if you need ORM (org.springframework.orm.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Object-to-XML Mapping (OXM) abstraction and integration with JAXB, 
			JiBX, Castor, XStream, and XML Beans. (depends on spring-core, spring-beans, 
			spring-context) Define this if you need OXM (org.springframework.oxm.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Web application development utilities applicable to both Servlet and 
			Portlet Environments (depends on spring-core, spring-beans, spring-context) 
			Define this if you use Spring MVC, or wish to use Struts, JSF, or another 
			web framework with Spring (org.springframework.web.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Spring MVC for Servlet Environments (depends on spring-core, spring-beans, 
			spring-context, spring-web) Define this if you use Spring MVC with a Servlet 
			Container such as Apache Tomcat (org.springframework.web.servlet.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Spring MVC for Portlet Environments (depends on spring-core, spring-beans, 
			spring-context, spring-web) Define this if you use Spring MVC with a Portlet 
			Container (org.springframework.web.portlet.*) -->
<!-- 		<dependency> -->
<!-- 			<groupId>org.springframework</groupId> -->
<!-- 			<artifactId>spring-webmvc-portlet</artifactId> -->
<!-- 			<version>${org.springframework.version}</version> -->
<!-- 		</dependency> -->

		<!-- Support for testing Spring applications with tools such as JUnit and 
			TestNG This artifact is generally always defined with a 'test' scope for 
			the integration testing framework and unit testing stubs -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- end -->

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.0.13</version>
		</dependency>

		<!--log4j start -->
<!-- 		<dependency> -->
<!-- 			<groupId>log4j</groupId> -->
<!-- 			<artifactId>log4j</artifactId> -->
<!-- 			<version>1.2.14</version> -->
<!-- 		</dependency> -->
		<!--end -->
		
		

		<!-- slf4j 与 log4j兼容方案 begin -->
		<!-- <dependency> -->
		<!-- <groupId>org.slf4j</groupId> -->
		<!-- <artifactId>slf4j-log4j12</artifactId> -->
		<!-- <version>1.6.4</version> -->
		<!-- </dependency> -->
		<!-- slf4j 与 log4j兼容方案 end -->

		<!--mybatis start -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.1.1</version>
		</dependency>
		<!--end -->

		<!-- aspectj start -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.6.8</version>
			<!-- <scope>runtime</scope> -->
		</dependency>
		<!--end -->

		<!-- cglib start -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>2.2.2</version>
			<scope>runtime</scope>
		</dependency>
		<!-- end -->


		<!-- json.jar org.json start -->
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20090211</version>
		</dependency>
		<!--end -->

		<!--运行时依赖 -->
		<!--连接池 -->
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.3</version>
			<scope>runtime</scope>
		</dependency>
		<!-- mysql start -->
<!-- 		<dependency> -->
<!-- 			<groupId>mysql</groupId> -->
<!-- 			<artifactId>mysql-connector-java</artifactId> -->
<!-- 			<version>5.1.25</version> -->
<!-- 			<scope>runtime</scope> -->
<!-- 		</dependency> -->
		<!--end -->
		
<!-- 		postgresql start -->
		<dependency>
			<groupId>postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>9.1-901.jdbc4</version>
		</dependency>
<!-- 		postgresql end -->
			
<!-- 		mongo and morphia start -->
		<!-- <dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongo-java-driver</artifactId>
			<version>2.11.1</version>
		</dependency>
		
		<dependency>
			<groupId>com.github.jmkgreen.morphia</groupId>
			<artifactId>morphia</artifactId>
			<version>${versions.morphia}</version>
		</dependency>
		
		<dependency>
			<groupId>com.github.jmkgreen.morphia</groupId>
			<artifactId>morphia-validation</artifactId>
			<version>${versions.morphia}</version>
		</dependency> -->
<!-- 		mongo and morphia end -->
    
<!-- 		activiti begin -->
		<dependency>
		  <groupId>org.activiti</groupId>
		  <artifactId>activiti-engine</artifactId>
		  <version>5.14</version>
		</dependency>
		
		<dependency>
			<groupId>org.activiti</groupId>
			<artifactId>activiti-spring</artifactId>
			<version>5.14</version>
		</dependency>
<!-- 		acriviti end -->

		<!-- <dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>1.0.0.GA</version>
		</dependency> -->
		
	</dependencies>

</project>
